// Generated by CoffeeScript 1.6.3
(function() {
  var bins_, domain_, histogram, histogram_, o, utils, x, zip, zip_;

  histogram = function(data, numBins) {
    var binNum, bins, domain, item, lookup, max, min, range, width, xx, _i, _len;
    if (numBins == null) {
      numBins = 10;
    }
    max = Math.max.apply(Math, data);
    min = Math.min.apply(Math, data);
    range = max - min;
    bins = (function() {
      var _i, _results;
      _results = [];
      for (item = _i = 0; 0 <= numBins ? _i < numBins : _i > numBins; item = 0 <= numBins ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    width = range / (numBins - 1);
    domain = (function() {
      var _i, _results;
      _results = [];
      for (xx = _i = 0; 0 <= numBins ? _i < numBins : _i > numBins; xx = 0 <= numBins ? ++_i : --_i) {
        _results.push(width * xx + min);
      }
      return _results;
    })();
    lookup = (function(width, min) {
      return function(value) {
        var bin;
        bin = Math.floor((value - min) / width);
        return bin;
      };
    })(width, min);
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      item = data[_i];
      binNum = lookup(item);
      bins[binNum]++;
    }
    return {
      bins: bins,
      domain: domain
    };
  };

  x = [-10, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 1, 1, 9, 9, 9, 9.6];

  o = histogram(x, 11);

  bins_ = o.bins, domain_ = o.domain;

  zip = function() {
    var arr, i, length, lengthArray, _i, _results;
    lengthArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arr = arguments[_i];
        _results.push(arr.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = arguments.length; _j < _len; _j++) {
          arr = arguments[_j];
          _results1.push(arr[i]);
        }
        return _results1;
      }).apply(this, arguments));
    }
    return _results;
  };

  zip_ = function() {
    var arr, i, length, lengthArray, _i;
    lengthArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arr = arguments[_i];
        _results.push(arr.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      arr[i] = {
        word_count: arguments[0][i],
        paragraph_num: arguments[1][i].toFixed(1)
      };
    }
    return arr;
  };

  histogram_ = function(data, numBins) {
    o = histogram(data, 20);
    bins_ = o.bins, domain_ = o.domain;
    return zip_(bins_, domain_);
  };

  if (typeof window !== "undefined" && window !== null) {
    window.histogram_ = histogram_;
  }

  utils = (typeof exports !== "undefined" && exports !== null) && exports || (this.utils = {});

  utils.histogram_ = histogram_;

  console.log(histogram(x, 11));

}).call(this);
